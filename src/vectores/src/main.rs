fn main() {
    // Declare vector, initialize with three values
    let three_nums = vec![15, 3, 46];
    println!("Initial vector: {:?}", three_nums);  
    
    // Declare vector, value = "0", length = 5
    let zeroes = vec![0; 5];
    println!("Zeroes: {:?}", zeroes);
    // üí° Rust no sabe c√≥mo mostrar un vector de enteros. Si intentamos mostrar la informaci√≥n del vector sin usar un formato especial, el compilador emite un error. 



    //Los vectores tambi√©n se pueden crear mediante el m√©todo Vec::new(). Este m√©todo de creaci√≥n de vectores nos permite agregar y quitar valores al final del vector. Para admitir este comportamiento, declaramos la variable de vector como mutable con la palabra clave mut.

    let mut fruits = Vec::new();
    // Poblar vectores con .push()
    fruits.push("Apple");
    fruits.push("Banana");
    fruits.push("Cherry");
    fruits.push("Strawberry");

    // fruits.push(31); //‚ùå Error, no podemos agregar un entero a un vector de cadenas -> expected `&str`, found integer

    //Mostrar el vector
    println!("Fruits: {:?}", fruits);

    // Quitar el ultimo valor, con .pop()
    println!("Popped: {:?}", fruits.pop());
    println!("Fruits: {:?}", fruits);


    // Indexaci√≥n
    let mut numbers = vec![4,52,3];
    let first = numbers[0];
    println!("Vector: {:?} First: {}", numbers, first);

    /* Busqueda de valores de indice fuera de los limites del vector

    Al igual que con las matrices, no se puede acceder a un elemento de un vector con un √≠ndice que no est√© en el intervalo permitido. Este tipo de expresi√≥n para una matriz hace que el compilador devuelva un error. En el caso de los vectores, la compilaci√≥n pasa, pero el programa entra en un estado de p√°nico irrecuperable en la expresi√≥n y detiene la ejecuci√≥n del programa.
    
     */

     let beyond = numbers[10];
     println!("{}", beyond);
}
